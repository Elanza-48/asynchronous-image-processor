plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.4' apply false
	id 'org.graalvm.buildtools.native' version '0.10.6' apply false
	id 'io.spring.dependency-management' version '1.1.7' apply false
}


version = '0.0.1-SNAPSHOT'

allprojects {
	group = 'com.elanza48'

	java {
		toolchain {
			languageVersion = JavaLanguageVersion.of(21)
		}
	}
}

ext {
  springCloudVersion = "2024.0.1"
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'java-library'
	apply plugin: 'org.springframework.boot'
	apply plugin:	'io.spring.dependency-management'

		dependencyManagement {
			imports {
				mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
			}
		}

	dependencies {
		

		implementation 'org.springframework.boot:spring-boot-starter'
		implementation 'org.springframework.boot:spring-boot-starter-webflux'


		implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'

		compileOnly 'org.projectlombok:lombok'
		testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

		annotationProcessor 'org.projectlombok:lombok'
		annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testImplementation 'io.projectreactor:reactor-test'
  	testImplementation 'org.springframework.kafka:spring-kafka-test'
		testImplementation 'org.springframework.cloud:spring-cloud-stream-test-binder'
	}

	tasks.named('test') {
		useJUnitPlatform()
	}

}

configure([project(':gateway'), project(':auth'), project(':csv-processor'), project(':image-processor'), project(':notification')]) {

	apply plugin: 'org.graalvm.buildtools.native'
	
	dependencies {

  	implementation 'org.springframework.kafka:spring-kafka'
		implementation 'io.projectreactor.kafka:reactor-kafka'

		implementation 'org.springframework.boot:spring-boot-starter-actuator'
		
		implementation 'org.springframework.cloud:spring-cloud-stream'
		implementation 'io.micrometer:micrometer-tracing-bridge-brave'
	
		developmentOnly 'org.springframework.boot:spring-boot-devtools'
		runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

		implementation project(':libs');
	}

}


configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}
